diff --git a/src/server/game/Entities/Unit/Unit.cpp b/src/server/game/Entities/Unit/Unit.cpp
--- a/src/server/game/Entities/Unit/Unit.cpp
+++ b/src/server/game/Entities/Unit/Unit.cpp
@@ -8102,6 +8102,15 @@
                             CastSpell(pVictim, 27526, true, castItem, triggeredByAura);
                         return true;
                     }
+                    // Mark of the Fallen Champion
+                    case 72293:
+                        if(pVictim && pVictim->HasAura(72293) && !pVictim->isAlive())
+                        {
+                            Creature* saurfang = pVictim->FindNearestCreature(37813, 500.0f, true);
+                                if(saurfang && saurfang->isAlive())
+                                   saurfang->CastSpell(saurfang, 72260, true);
+                        }
+                        return true;
                 }
                 break;
             case SPELLFAMILY_MAGE:
@@ -8775,10 +8784,6 @@
                 return false;
             break;
         }
-        // Deathbringer Saurfang - Blood Link
-        case 72202:
-            target = FindNearestCreature(37813, 75.0f); // NPC_DEATHBRINGER_SAURFANG = 37813
-            break;
         // Shadow's Fate (Shadowmourne questline)
         case 71169:
             if (GetTypeId() != TYPEID_PLAYER)

diff --git a/src/server/game/Spells/SpellEffects.cpp b/src/server/game/Spells/SpellEffects.cpp
--- a/src/server/game/Spells/SpellEffects.cpp
+++ b/src/server/game/Spells/SpellEffects.cpp
@@ -423,6 +423,24 @@
                         damage = unitTarget->CountPctFromMaxHealth(50);
                         break;
                     }
+                    // Bone Storm
+                    case 69075:
+                    case 70834:
+                    case 70835:
+                    case 70836:
+                    {
+                        float distance = m_caster->GetDistance(unitTarget);
+                        float radius = 12.0f;
+                        if(distance > radius)
+                            return;
+
+                        if(distance < 1)
+                           distance = 1;
+
+                        int32 bp0 = m_spellInfo->EffectBasePoints[0];
+                        int32 damage = int32(bp0 / (distance / radius));
+                        break;
+                    }
                     // Tympanic Tantrum
                     case 62775:
                     {
@@ -4316,6 +4334,80 @@
                     }
                     return;
                 }
+                 //Gastric bloat
+                case 72219:
+                case 72551:
+                case 72552:
+                case 72553:
+                {
+                    if(!unitTarget)
+                        return;
+
+                    uint32 spellId = 0;
+                    uint32 auraId = 0;
+
+                    switch (m_spellInfo->Id)
+                    {
+                        case 72219: spellId = 72227; auraId = 72219; break;
+                        case 72551: spellId = 72228; auraId = 72551; break;
+                        case 72552: spellId = 72229; auraId = 72552; break;
+                        case 72553: spellId = 72230; auraId = 72553; break;
+                    }
+
+                    if(Aura* GastricAur = unitTarget->GetAura(auraId))
+                    {
+                        if (GastricAur->GetStackAmount() > 9)
+                        {
+                            unitTarget->RemoveAurasDueToSpell(auraId);
+                            unitTarget->CastSpell(unitTarget, spellId, true);  //cast gastric explosion
+                        }
+                    }
+                    return;
+                }
+                case 69200:                                 // Raging Spirit
+                {
+                    if (!unitTarget)
+                        return;
+
+                    unitTarget->CastSpell(unitTarget, 69201, true);
+                    return;
+                }
+                case 71446:                                 // Twilight Bloodbolt 10N
+                case 71478:                                 // Twilight Bloodbolt 25N
+                case 71479:                                 // Twilight Bloodbolt 10H
+                case 71480:                                 // Twilight Bloodbolt 25H
+                {
+                    if (!unitTarget)
+                        return;
+
+                    uint32 spellId = 71447;
+                    switch (m_spellInfo->Id)
+                    {
+                        case 71478: spellId = 71481; break;
+                        case 71479: spellId = 71482; break;
+                        case 71480: spellId = 71483; break;
+                    }
+                    unitTarget->CastSpell(unitTarget, spellId, true);
+                    return;
+                }
+                case 71899:                                 // Bloodbolt Whirl 10N
+                case 71900:                                 // Bloodbolt Whirl 25N
+                case 71901:                                 // Bloodbolt Whirl 10H
+                case 71902:                                 // Bloodbolt Whirl 25H
+                {
+                    if (!unitTarget)
+                        return;
+
+                    uint32 spellId = 71446;
+                    switch (m_spellInfo->Id)
+                    {
+                        case 71900: spellId = 71478; break;
+                        case 71901: spellId = 71479; break;
+                        case 71902: spellId = 71480; break;
+                    }
+                    m_caster->CastSpell(unitTarget, spellId, true);
+                    return;
+                }
                 case 45204: // Clone Me!
                 case 41055: // Copy Weapon
                 case 45206: // Copy Off-hand Weapon


diff --git a/src/server/game/Spells/Auras/SpellAuraEffects.cpp b/src/server/game/Spells/Auras/SpellAuraEffects.cpp
--- a/src/server/game/Spells/Auras/SpellAuraEffects.cpp
+++ b/src/server/game/Spells/Auras/SpellAuraEffects.cpp
@@ -1836,6 +1836,8 @@
                 target->CastSpell((Unit*)NULL , GetAmount() , true);
             break;
         case SPELL_AURA_PERIODIC_DUMMY:
+            if(GetId() == 72178)
+                caster->CastSpell(caster, 72202, true);
             PeriodicDummyTick(target, caster);
             break;
         case SPELL_AURA_PERIODIC_TRIGGER_SPELL:

diff --git a/src/server/game/Spells/Spell.cpp b/src/server/game/Spells/Spell.cpp
--- a/src/server/game/Spells/Spell.cpp
+++ b/src/server/game/Spells/Spell.cpp
@@ -5042,6 +5042,12 @@
                     if (m_caster->IsInWater())
                         return SPELL_FAILED_ONLY_ABOVEWATER;
                 }
+				else if (m_spellInfo->Id == 72202) //Blood Link
+				{
+				    Creature* saurfang = m_caster->FindNearestCreature(37813, 500.0f, true);
+					if(saurfang && saurfang->isAlive())
+					    saurfang->CastSpell(saurfang, 72195, true);
+				}
                 else if (m_spellInfo->SpellIconID == 156)    // Holy Shock
                 {
                     // spell different for friends and enemies

diff --git a/src/server/game/Spells/SpellMgr.cpp b/src/server/game/Spells/SpellMgr.cpp
--- a/src/server/game/Spells/SpellMgr.cpp
+++ b/src/server/game/Spells/SpellMgr.cpp
@@ -3621,6 +3621,7 @@
         case 69782: case 69796:                 // Ooze Flood
         case 69798: case 69801:                 // Ooze Flood
         case 69538: case 69553: case 69610:     // Ooze Combine
+        case 71614:                             // Ice Lock
             mSpellCustomAttr[i] |= SPELL_ATTR_CU_EXCLUDE_SELF;
             count++;
             break;